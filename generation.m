function generation = generation(A,t1,t2)
% generate new generation with n members
% A is a 5d matrix where size(A,5) = n
% t1 = tuner for crossovers
% t2 = tuner for mutations

n = size(A,5);

% structures generated by crossovers and by mutations
double_generation = zeros(100,100,300,11,2 * n);

tempCellArray = generate_crossovers(A, t1, t1, A(:,:,:,1,:));    

%  Generate crossovers randomly between pairs in A.
for j = 1:size(tempCellArray,2)
    double_generation(:, :, :, 1, j) = tempCellArray{1, j};
end

% generate mutated structures
for i = n:2 * n
    double_generation(:,:,:,:,i) = matrixMutate(A(:,:,:,:,i),100,t2);
end

% TODO: Add actual fitting function
% calculate efficiencies for structures in double_generation
fittingFunction = zeros(size(double_generation, 5));
for k = 1: size(double_generation, 5)
    fittingFunction(k) = Egen1(double_generation(:,:,:,:, k))
end

% output array
generation = zeros(100,100,300,11,n);

% put best half of double_generation in generation
for l = 1:n
    [value,maxIndex] = max(fittingFunction);
    generation(:,:,:,:,l) = double_generation(:,:,:,:,maxIndex);
    fittingFunction(maxIndex) = 0;
end